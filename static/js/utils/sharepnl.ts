import md5 from 'crypto-js/md5';
import sha256 from 'crypto-js/sha256';
import moment from 'moment';
import { TSynAddressShareIdMaps } from './common';

export const getSynShareIdTimestampMaps = (storageKey: string) =>
  JSON.parse(localStorage.getItem(storageKey) || '{}') as TSynAddressShareIdMaps;
export const setSynShareIdTimestampMaps = (synSharePnlIdTimestampMaps: TSynAddressShareIdMaps, storageKey: string) =>
  localStorage.setItem(storageKey, JSON.stringify(synSharePnlIdTimestampMaps));
export function getShareId({
  userAddr,
  timestamp,
  storageKey,
}: {
  userAddr: string;
  timestamp?: number;
  storageKey?: string;
}): string {
  // Get the current date and time for 30-minute intervals.
  let date = moment().second(0);
  if (timestamp) {
    date = moment(timestamp).second(0);
  }
  // if (date.minute() >= 30) {
  //   date = date.minute(30);
  // } else {
  //   date = date.minute(0);
  // }
  const params = [date.unix(), userAddr, storageKey].join('');
  return getMd5Id(params);
}

export const getValidShareId = (userAddr: string, storageKey: string) => {
  const timestamp = Date.now();
  const shareIdTimestampMaps = getSynShareIdTimestampMaps(storageKey);
  const userMap = shareIdTimestampMaps[userAddr];
  const isShareIdValid = userMap && timestamp - (shareIdTimestampMaps[userAddr]?.timestamp || 0) < 7 * 24 * 60 * 60;
  const shareId = isShareIdValid
    ? userMap.shareId
    : getShareId({
        userAddr,
        timestamp,
        storageKey,
      });
  return { shareId, isShareIdValid, timestamp };
};

/**
 * Generates a unique identifier every 30mins for the share PNL based on the provided parameters. The identifier is generated by hashing the parameters using MD5.
 * @param {Object} options - The options object.
 * @param {number} options.chainId - The chain ID.
 * @param {string} options.pairId - The pair ID.
 * @param {string} options.userAddr - The user address.
 * @param {boolean} options.shareLeverage - The share leverage flag.
 * @param {boolean} options.sharePnl - The share PNL flag.
 * @param {boolean} options.sharePrice - The share price flag.
 * @param {number} [params.timestamp] - The timestamp (optional). If not provided, the current timestamp will be used.
 * @returns {string} The generated share PNL identifier.
 */
export function getSharePNLId({
  chainId,
  pairId,
  userAddr,
  shareLeverage,
  sharePnl,
  sharePrice,
  timestamp,
  storageKey,
}: {
  chainId: number;
  pairId: string;
  userAddr: string;
  shareLeverage: boolean;
  sharePnl: boolean;
  sharePrice: boolean;
  timestamp?: number;
  storageKey?: string;
}): string {
  // Get the current date and time for 30-minute intervals.
  let date = moment().second(0);
  if (timestamp) {
    date = moment(timestamp).second(0);
  }
  if (date.minute() >= 30) {
    date = date.minute(30);
  } else {
    date = date.minute(0);
  }
  const params = [date.unix(), chainId, pairId, userAddr, shareLeverage, sharePnl, sharePrice, storageKey].join('');
  return getMd5Id(params);
}

export function getMd5Id(msg: string): string {
  const md5Msg = md5(msg);
  return md5Msg.toString();
}

export function sha256HashString(input: string): string {
  return sha256(input).toString();
}

/**
 * Calculates the verification string for share PNL.
 * @param {Object} params - The parameters for calculating the verification string.
 * @param {string} params.id - The ID.
 * @param {string} params.base64Data - The base64 data.
 * @param {number} [params.timestamp] - The timestamp (optional). If not provided, the current timestamp will be used.
 * @returns {string} The verification string.
 */
export function getShareVerification({
  id,
  base64Data,
  timestamp,
}: {
  id: string;
  base64Data: string;
  timestamp?: number;
}): string {
  if (!timestamp) {
    timestamp = Date.now(); // ms
  }

  const base64Hash = sha256HashString(base64Data);
  const idHash = sha256HashString(id);
  const timestampHash = sha256HashString(timestamp.toString());
  const timestampAndIdHash = sha256HashString(timestampHash + idHash);
  const timestampAndIdHashTwice = sha256HashString(timestampAndIdHash);
  const verification = sha256HashString(base64Hash + timestampAndIdHashTwice);
  return verification;
}
