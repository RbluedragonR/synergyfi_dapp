import { parseUnits as t } from "@ethersproject/units";
import e from "fetch-retry";
import { polygon as o } from "../../chains/polygon.js";
import { polygonAmoy as r } from "../../chains/polygonAmoy.js";
import { polygonMumbai as a } from "../../chains/polygonMumbai.js";
const i = e(fetch, { retries: 3, retryDelay: 500 }),
  s = (t) => [o.id, a.id, r.id].includes(t),
  n = (e) => ({
    maxPriorityFee: t(e.maxPriorityFee.toFixed(9), "gwei").toHexString(),
    maxFee: t(e.maxFee.toFixed(9), "gwei").toHexString(),
  }),
  y = async (t) => {
    let e = "";
    switch (t) {
      case o.id:
        e = "https://gasstation.polygon.technology/v2";
        break;
      case a.id:
        e = "https://gasstation-testnet.polygon.technology/v2";
        break;
      case r.id:
        e = "https://gasstation.polygon.technology/amoy";
        break;
      default:
        throw Error(`chainId ${t} does not support polygon gas stations`);
    }
    const s = await i(e),
      y = await s.json();
    if (s.status > 399) throw y;
    return {
      safeLow: n((c = y).safeLow),
      standard: n(c.standard),
      fast: n(c.fast),
    };
    var c;
  };
async function c(t) {
  if (!s(t.chainId))
    throw new Error("Invalid chain ID for Polygon gas estimation.");
  if (
    (void 0 === t.type && (t.type = 2),
    t.maxPriorityFeePerGas && t.maxFeePerGas)
  )
    return t;
  try {
    const { standard: e } = await y(t.chainId);
    t.maxPriorityFeePerGas || (t.maxPriorityFeePerGas = e.maxPriorityFee),
      t.maxFeePerGas || (t.maxFeePerGas = e.maxFee);
  } catch (t) {
    throw new Error(
      `Failed to set gas prices from Polygon gas station with error: ${t}.`
    );
  }
  return t;
}
export {
  c as defaultGasForPolygon,
  y as getPolygonGasStationFees,
  s as isPolygon,
};
