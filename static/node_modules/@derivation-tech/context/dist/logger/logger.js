"use strict";
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggerFactory =
  exports.Logger =
  exports.BaseLogger =
  exports.LogLevel =
    void 0;
const chalk_1 = __importDefault(require("chalk"));
const moment_1 = __importDefault(require("moment"));
const formatTs = () => (0, moment_1.default)().format();
var LogLevel;
(function (LogLevel) {
  LogLevel[(LogLevel["Silent"] = 0)] = "Silent";
  LogLevel[(LogLevel["Info"] = 1)] = "Info";
  LogLevel[(LogLevel["Debug"] = 2)] = "Debug";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
class BaseLogger {
  constructor(name, logLevel = LogLevel.Info) {
    this.name = name;
    this.logLevel = logLevel;
  }
}
exports.BaseLogger = BaseLogger;
class Logger extends BaseLogger {
  constructor(name, logLevel = LogLevel.Info) {
    super(name, logLevel);
  }
  info(...args) {
    if (LogLevel.Info <= this.logLevel) {
      console.info(
        ...[
          formatTs(),
          `[${this.name}]`,
          chalk_1.default.greenBright("INFO"),
          ...args,
        ]
      );
    }
  }
  warn(...args) {
    if (LogLevel.Info <= this.logLevel) {
      console.info(
        ...[
          formatTs(),
          `[${this.name}]`,
          chalk_1.default.yellowBright("WARN"),
          ...args,
        ]
      );
    }
  }
  error(...args) {
    if (LogLevel.Info <= this.logLevel) {
      console.info(
        ...[formatTs(), `[${this.name}]`, chalk_1.default.red("ERROR"), ...args]
      );
    }
  }
  debug(...args) {
    if (LogLevel.Debug <= this.logLevel) {
      console.info(
        ...[
          formatTs(),
          `[${this.name}]`,
          chalk_1.default.cyanBright("DEBUG"),
          ...args,
        ]
      );
    }
  }
}
exports.Logger = Logger;
class LoggerFactory {
  static getLogger(name, logLevel = LogLevel.Info) {
    return new Logger(name, logLevel);
  }
}
exports.LoggerFactory = LoggerFactory;
