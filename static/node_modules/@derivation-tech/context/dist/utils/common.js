"use strict";
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_RETRY_OPTION = void 0;
exports.getRandomInt = getRandomInt;
exports.wait = wait;
exports.now = now;
exports.setValueIfUndefined = setValueIfUndefined;
exports.currentTimestampMilSecs = currentTimestampMilSecs;
exports.formatTs = formatTs;
exports.chunk = chunk;
exports.transpose = transpose;
exports.translateIdentifiers = translateIdentifiers;
exports.roughlyEqual = roughlyEqual;
exports.getRandomIntBetween = getRandomIntBetween;
exports.getRandomBetween = getRandomBetween;
exports.randomSort = randomSort;
exports.fromWad = fromWad;
exports.toWad = toWad;
exports.formatWad = formatWad;
exports.formatUnits = formatUnits;
exports.shortenNumberByDecimals = shortenNumberByDecimals;
exports.formatPercentage = formatPercentage;
const ethers_1 = require("ethers");
const moment_1 = __importDefault(require("moment"));
const ethers_2 = require("ethers");
const logger_1 = require("../logger");
const error_1 = require("../error");
const logger = logger_1.LoggerFactory.getLogger("Common");
function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}
function wait(seconds) {
  return new Promise((resolve) => setTimeout(() => resolve(), seconds * 1000));
}
function now() {
  return Math.floor(new Date().getTime() / 1000);
}
function setValueIfUndefined(obj, key, value) {
  if (obj[key] === undefined) {
    obj[key] = value;
  }
}
function currentTimestampMilSecs() {
  return Math.floor(new Date().getTime());
}
function formatTs(timestamp, utcOffSet = 8) {
  if (timestamp) {
    return (0, moment_1.default)(timestamp * 1000)
      .utcOffset(utcOffSet)
      .format("yyyy-MM-DD HH:mm:ss");
  } else {
    return (0, moment_1.default)()
      .utcOffset(utcOffSet)
      .format("yyyy-MM-DD HH:mm:ss");
  }
}
function chunk(arr, batchSize) {
  const result = [];
  for (let i = 0; i < arr.length; i += batchSize) {
    result.push(arr.slice(i, i + batchSize));
  }
  return result;
}
function transpose(arr) {
  return arr[0].map((_, colIndex) => arr.map((row) => row[colIndex]));
}
function translateIdentifiers(input) {
  return input
    .toLowerCase()
    .split(",")
    .map((str) => {
      if (ethers_1.ethers.utils.isAddress(str)) return [str];
      if (!str.includes(":")) return [str];
      if (str.split(":").length != 2)
        throw new error_1.ContextCoreError(`BAD_SIGNER_INPUT: ${str}`);
      const hdPathSpecified = str.includes("/");
      let name, range;
      if (hdPathSpecified)
        [name, range] = [
          str.slice(0, str.lastIndexOf("/") + 1),
          str.slice(str.lastIndexOf("/") + 1, str.length),
        ];
      else [name, range] = str.split(":");
      if (!range.includes("-")) return [str];
      if (range.split("-").length != 2)
        throw new error_1.ContextCoreError(`BAD_SIGNER_INPUT: ${str}`);
      const [begin, end] = range.split("-").map((r) => parseInt(r));
      if (!(begin < end))
        throw new error_1.ContextCoreError(`BAD_SIGNER_INPUT: ${str}`);
      const indexes = Array.from(Array(end - begin + 1).keys()).map(
        (i) => i + begin
      );
      return indexes.map((i) =>
        hdPathSpecified ? `${name}${i}` : `${name}:${i}`
      );
    })
    .flat();
}
function roughlyEqual(x, y, ratio = 20) {
  const diff = x.sub(y).abs();
  const max = x.gt(y) ? x : y;
  return diff.lte(max.mul(ratio).div(100));
}
function getRandomIntBetween(min, max) {
  return Math.floor(getRandomBetween(min, max));
}
function getRandomBetween(min, max) {
  return Math.random() * (max - min) + min;
}
function randomSort(elements) {
  return elements.sort(() => Math.random() - 0.5);
}
function fromWad(wad) {
  return Number(ethers_1.ethers.utils.formatEther(wad));
}
function toWad(num) {
  return ethers_2.utils.parseUnits(num.toString());
}
function formatWad(value, fixedDecimals = 6) {
  return shortenNumberByDecimals(
    ethers_1.ethers.utils.formatEther(value),
    fixedDecimals
  );
}
function formatUnits(value, decimals, fixedDecimals = 6) {
  return shortenNumberByDecimals(
    ethers_1.ethers.utils.formatUnits(value, decimals),
    fixedDecimals
  );
}
function shortenNumberByDecimals(s, fixedDecimals) {
  if (s.split(".").length > 1 && s.split(".")[1].length > fixedDecimals) {
    return Number(s).toFixed(fixedDecimals);
  } else {
    return s;
  }
}
function formatPercentage(num, decimals = 2) {
  return (num * 100).toFixed(decimals) + "%";
}
exports.DEFAULT_RETRY_OPTION = {
  retries: 5,
  onRetry: (error) => {
    logger.error("retrying on error:", error);
  },
};
