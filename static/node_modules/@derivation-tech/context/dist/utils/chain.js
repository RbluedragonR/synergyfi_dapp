"use strict";
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProvider = getProvider;
exports.getWssProvider = getWssProvider;
exports.getProviderHeaders = getProviderHeaders;
exports.isSameAddress = isSameAddress;
exports.isZeroAddress = isZeroAddress;
const ws_1 = __importDefault(require("ws"));
const ethers_1 = require("ethers");
const constant_1 = require("./constant");
function getProvider(url, timeout = 20000, pollingInterval = 4000) {
  const provider = new ethers_1.ethers.providers.JsonRpcProvider({
    url,
    timeout: timeout,
  });
  provider.pollingInterval = pollingInterval;
  return provider;
}
function getWssProvider(url, pollingInterval = 4000) {
  const ws = new ws_1.default(url);
  const provider = new ethers_1.ethers.providers.WebSocketProvider(ws);
  provider.pollingInterval = pollingInterval;
  return provider;
}
function getProviderHeaders(network, type) {
  const envAuthKey = constant_1.CHAIN_ID[network] + "_" + type + "_AUTH";
  if (!process.env[envAuthKey]) {
    return {};
  }
  return {
    Authorization:
      "Basic " + Buffer.from(process.env[envAuthKey]).toString("base64"),
  };
}
function isSameAddress(addr1, addr2) {
  if (
    ethers_1.ethers.utils.isAddress(addr1) === false ||
    ethers_1.ethers.utils.isAddress(addr2) === false
  )
    return false;
  return addr1.toLocaleLowerCase() === addr2.toLocaleLowerCase();
}
function isZeroAddress(addr) {
  return isSameAddress(addr, ethers_1.ethers.constants.AddressZero);
}
