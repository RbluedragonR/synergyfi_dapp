"use strict";
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, "__esModule", { value: true });
exports.getChainInfo = getChainInfo;
const local_json_1 = __importDefault(require("./local.json"));
const polygon_json_1 = __importDefault(require("./polygon.json"));
const polygonzkevm_json_1 = __importDefault(require("./polygonzkevm.json"));
const ethereum_json_1 = __importDefault(require("./ethereum.json"));
const goerli_json_1 = __importDefault(require("./goerli.json"));
const bsc_json_1 = __importDefault(require("./bsc.json"));
const arbitrum_json_1 = __importDefault(require("./arbitrum.json"));
const zksyncera_json_1 = __importDefault(require("./zksyncera.json"));
const linea_json_1 = __importDefault(require("./linea.json"));
const optimism_json_1 = __importDefault(require("./optimism.json"));
const scroll_json_1 = __importDefault(require("./scroll.json"));
const mantle_json_1 = __importDefault(require("./mantle.json"));
const base_json_1 = __importDefault(require("./base.json"));
const conflux_json_1 = __importDefault(require("./conflux.json"));
const mapo_json_1 = __importDefault(require("./mapo.json"));
const sepolia_json_1 = __importDefault(require("./sepolia.json"));
const klaytn_json_1 = __importDefault(require("./klaytn.json"));
const blastSepolia_json_1 = __importDefault(require("./blastSepolia.json"));
const blast_json_1 = __importDefault(require("./blast.json"));
const manta_json_1 = __importDefault(require("./manta.json"));
const berabartio_json_1 = __importDefault(require("./berabartio.json"));
const monadTestnet_json_1 = __importDefault(require("./monadTestnet.json"));
const pharosdevnet_json_1 = __importDefault(require("./pharosdevnet.json"));
const avalanche_json_1 = __importDefault(require("./avalanche.json"));
const gnosis_json_1 = __importDefault(require("./gnosis.json"));
const error_1 = require("../error");
function getChainInfo(nameOrId) {
  const allInfos = [
    local_json_1.default,
    polygon_json_1.default,
    polygonzkevm_json_1.default,
    ethereum_json_1.default,
    goerli_json_1.default,
    bsc_json_1.default,
    arbitrum_json_1.default,
    zksyncera_json_1.default,
    linea_json_1.default,
    optimism_json_1.default,
    scroll_json_1.default,
    mantle_json_1.default,
    base_json_1.default,
    conflux_json_1.default,
    mapo_json_1.default,
    sepolia_json_1.default,
    klaytn_json_1.default,
    blastSepolia_json_1.default,
    blast_json_1.default,
    manta_json_1.default,
    berabartio_json_1.default,
    monadTestnet_json_1.default,
    pharosdevnet_json_1.default,
    avalanche_json_1.default,
    gnosis_json_1.default,
  ];
  for (const info of allInfos) {
    if (typeof nameOrId === "number" && info.chainId === nameOrId) {
      return info;
    }
    if (
      typeof nameOrId === "string" &&
      (info.chainAlias
        .map((alias) => alias.toLowerCase())
        .includes(nameOrId.toLowerCase()) ||
        info.chainName.toLowerCase() === nameOrId.toLowerCase())
    ) {
      return info;
    }
  }
  throw new error_1.ContextCoreError(`unsupported network ${nameOrId}`);
}
