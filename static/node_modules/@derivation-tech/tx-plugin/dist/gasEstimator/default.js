"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultEthGasEstimator = void 0;
const ethers_1 = require("ethers");
const types_1 = require("../types");
const defaultBlocks = 100;
class DefaultEthGasEstimator {
  async getGasPrice(chainId, provider, txType, scaler = 1) {
    if (txType === types_1.TxType.LEGACY) {
      const gasPrice = await provider.getGasPrice();
      return { gasPrice };
    } else {
      const result = await provider.send("eth_feeHistory", [
        defaultBlocks,
        "latest",
        [3],
      ]);
      let maxBaseFeePerGas = ethers_1.BigNumber.from(0);
      let priorityFeePerGas = ethers_1.BigNumber.from(0);
      for (let i = 0; i < defaultBlocks; i++) {
        const baseFeePerGas = ethers_1.BigNumber.from(result.baseFeePerGas[i]);
        maxBaseFeePerGas = maxBaseFeePerGas.gt(baseFeePerGas)
          ? maxBaseFeePerGas
          : baseFeePerGas;
        priorityFeePerGas = priorityFeePerGas.add(
          ethers_1.BigNumber.from(result.reward[i][0])
        );
      }
      priorityFeePerGas = priorityFeePerGas
        .div(defaultBlocks)
        .mul(Math.floor(scaler * 100))
        .div(100);
      if (priorityFeePerGas.isZero()) {
        priorityFeePerGas = ethers_1.BigNumber.from(1);
      }
      return {
        maxFeePerGas: maxBaseFeePerGas.mul(2).add(priorityFeePerGas),
        maxPriorityFeePerGas: priorityFeePerGas,
      };
    }
  }
}
exports.DefaultEthGasEstimator = DefaultEthGasEstimator;
