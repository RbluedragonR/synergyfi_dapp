"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InverseCalcModule = void 0;
const calc_module_1 = require("../calc.module");
const utils_1 = require("../../utils");
class InverseCalcModule extends calc_module_1.CalcModule {
  async alignPriceToTick(instrumentAddr, price) {
    const isInverse = await this.context.perp.configuration.isInverse(
      instrumentAddr
    );
    const result = await super.alignPriceToTick(
      instrumentAddr,
      isInverse ? (0, utils_1.reversePrice)(price) : price
    );
    return isInverse
      ? {
          ...result,
          price: (0, utils_1.reversePrice)(result.price),
        }
      : result;
  }
  async getWadAtTick(instrumentAddr, tick) {
    const isInverse = await this.context.perp.configuration.isInverse(
      instrumentAddr
    );
    const result = await super.getWadAtTick(instrumentAddr, tick);
    return isInverse ? (0, utils_1.reversePrice)(result) : result;
  }
  async getTickAtPWad(instrumentAddr, price) {
    const isInverse = await this.context.perp.configuration.isInverse(
      instrumentAddr
    );
    return await super.getTickAtPWad(
      instrumentAddr,
      isInverse ? (0, utils_1.reversePrice)(price) : price
    );
  }
  async getWadAtTicks(instrumentAddr, lowerTick, upperTick) {
    const isInverse = await this.context.perp.configuration.isInverse(
      instrumentAddr
    );
    const result = await super.getWadAtTicks(
      instrumentAddr,
      lowerTick,
      upperTick
    );
    return isInverse
      ? {
          lowerPrice: (0, utils_1.reversePrice)(result.upperPrice),
          upperPrice: (0, utils_1.reversePrice)(result.lowerPrice),
        }
      : result;
  }
  async sqrtX96ToWad(instrumentAddr, sqrtPX96) {
    const isInverse = await this.context.perp.configuration.isInverse(
      instrumentAddr
    );
    const result = await super.sqrtX96ToWad(instrumentAddr, sqrtPX96);
    return isInverse ? (0, utils_1.reversePrice)(result) : result;
  }
}
exports.InverseCalcModule = InverseCalcModule;
