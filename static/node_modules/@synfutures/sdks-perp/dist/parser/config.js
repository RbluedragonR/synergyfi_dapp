"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigParser = void 0;
const ethers_1 = require("ethers");
const context_1 = require("@derivation-tech/context");
const typechain_1 = require("../typechain");
const utils_1 = require("../utils");
const farmat_1 = require("./farmat");
const enum_1 = require("../enum");
class ConfigParser extends context_1.ContractParser {
  constructor() {
    super(typechain_1.Config__factory.createInterface());
  }
  async parseBaseParam(_description, param, data) {
    switch (param.name) {
      case "tradingFeeRatio":
      case "protocolFeeRatio":
        return (0, farmat_1.formatRatio)(data);
      case "stabilityFeeRatioParam":
        return (0, farmat_1.extractFeeRatioParams)(
          ethers_1.BigNumber.from(data)
        )
          .map((p) => (0, context_1.formatWad)(p))
          .toString();
      case "tip":
      case "minMarginAmount":
        return (0, context_1.formatWad)(data);
      case "expiry":
        return (0, utils_1.formatExpiry)(data);
      case "qtype":
        return enum_1.QuoteType[Number(data)];
      default:
        return data.toString();
    }
  }
}
exports.ConfigParser = ConfigParser;
