"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CexMarketParser = void 0;
const context_1 = require("@derivation-tech/context");
const typechain_1 = require("../typechain");
const enum_1 = require("../enum");
const utils_1 = require("../utils");
const farmat_1 = require("./farmat");
const ethers_1 = require("ethers");
class CexMarketParser extends context_1.ContractParser {
  constructor() {
    super(typechain_1.CexMarket__factory.createInterface());
  }
  async parseBaseParam(_description, param, data) {
    switch (param.name) {
      case "time":
      case "initTime":
        return (0, farmat_1.formatTimestamp)(data);
      case "spot":
      case "raw":
      case "initMark":
      case "accumulation":
        return (0, context_1.formatWad)(data);
      case "expiry":
        return (0, utils_1.formatExpiry)(data);
      case "ftype":
        return enum_1.FeederType[Number(data)];
      case "compactEmaParam": {
        return (0, farmat_1.formatCompactEmaParam)(
          ethers_1.BigNumber.from(data)
        );
      }
      default:
        return data.toString();
    }
  }
}
exports.CexMarketParser = CexMarketParser;
