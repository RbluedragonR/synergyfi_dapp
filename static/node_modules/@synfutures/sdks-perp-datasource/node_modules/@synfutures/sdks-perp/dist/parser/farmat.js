"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatRatio = formatRatio;
exports.formatCompactEmaParam = formatCompactEmaParam;
exports.formatEmaParam = formatEmaParam;
exports.decodeEmaParam = decodeEmaParam;
exports.formatTimestamp = formatTimestamp;
exports.extractFeeRatioParams = extractFeeRatioParams;
exports.formatSqrtPX96 = formatSqrtPX96;
exports.formatTick = formatTick;
const ethers_1 = require("ethers");
const context_1 = require("@derivation-tech/context");
const math_1 = require("../math");
const constants_1 = require("../constants");
function formatRatio(value) {
  return (
    ethers_1.ethers.utils.formatUnits(ethers_1.BigNumber.from(value), 2) + "%"
  );
}
function formatCompactEmaParam(data) {
  return formatEmaParam(decodeEmaParam(ethers_1.BigNumber.from(data)));
}
function formatEmaParam(ema) {
  return Object.entries(ema)
    .map(([k, v]) => {
      if (k === "maxChangeRatioPerSecond") {
        return ` ${k}: ${formatRatio(ethers_1.BigNumber.from(v))}`;
      } else {
        return ` ${k}: ${v.toString()}`;
      }
    })
    .toString();
}
function decodeEmaParam(encoded) {
  return {
    emaHalfTime: encoded.shr(48).and(0xffff),
    maxTimeDelta: encoded.shr(32).and(0xffff),
    maxRawTimeDelta: encoded.shr(16).and(0xffff),
    maxChangeRatioPerSecond: encoded.and(0xffff),
  };
}
function formatTimestamp(value) {
  return new Date(
    ethers_1.BigNumber.from(value).mul(1000).toNumber()
  ).toISOString();
}
function extractFeeRatioParams(stabilityFeeRatioParam) {
  const ret = [];
  ret.push((0, math_1.s2w)(stabilityFeeRatioParam.and(math_1.MAX_UINT_24)));
  ret.push(
    (0, math_1.s2w)(stabilityFeeRatioParam.shr(24).and(math_1.MAX_UINT_16))
  );
  ret.push(
    (0, math_1.s2w)(stabilityFeeRatioParam.shr(40).and(math_1.MAX_UINT_16))
  );
  ret.push((0, math_1.s2w)(stabilityFeeRatioParam.shr(56)));
  return ret;
}
function formatSqrtPX96(sqrtPX96, fixedDecimals = 6) {
  return (0, context_1.formatWad)(
    (0, math_1.sqrtX96ToWad)(sqrtPX96),
    fixedDecimals
  );
}
function formatTick(tick) {
  if (tick < constants_1.MIN_TICK) {
    return "MIN_TICK";
  } else if (tick > constants_1.MAX_TICK) {
    return "MAX_TICK";
  } else {
    return `${tick}(${formatSqrtPX96(
      math_1.TickMath.getSqrtRatioAtTick(tick)
    )})`;
  }
}
