"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.concatId = concatId;
exports.dayIdFromTimestamp = dayIdFromTimestamp;
exports.hourIdFromTimestamp = hourIdFromTimestamp;
exports.weekIdFromTimestamp = weekIdFromTimestamp;
exports.getFundingChartIntervalSeconds = getFundingChartIntervalSeconds;
exports.roundFundingChartTimestamp = roundFundingChartTimestamp;
exports.getKlineIntervalSeconds = getKlineIntervalSeconds;
exports.roundKlineTimestamp = roundKlineTimestamp;
exports.getKlineIntervalStatement = getKlineIntervalStatement;
exports.fromWad = fromWad;
exports.reversePrice = reversePrice;
exports.pickQuoteFromSymbol = pickQuoteFromSymbol;
exports.pickQuoteFromFullSymbol = pickQuoteFromFullSymbol;
const ethers_1 = require("ethers");
const context_1 = require("@derivation-tech/context");
const enum_1 = require("./enum");
const errors_1 = require("./errors");
function concatId(id1, id2) {
  return String(id1).concat("-").concat(String(id2));
}
function dayIdFromTimestamp(timestamp = (0, context_1.now)()) {
  return (
    Math.floor(timestamp / context_1.SECS_PER_DAY) * context_1.SECS_PER_DAY
  );
}
function hourIdFromTimestamp(timestamp = (0, context_1.now)()) {
  return (
    Math.floor(timestamp / context_1.SECS_PER_HOUR) * context_1.SECS_PER_HOUR
  );
}
function weekIdFromTimestamp(timestamp = (0, context_1.now)()) {
  const daysOfWeek = 7;
  const dayOfWeek =
    (((Math.floor(timestamp / context_1.SECS_PER_DAY) + 4) % daysOfWeek) +
      daysOfWeek) %
    daysOfWeek;
  const diff =
    Math.floor(timestamp / context_1.SECS_PER_DAY) -
    dayOfWeek +
    (dayOfWeek === 0 ? -6 : 1);
  return diff * context_1.SECS_PER_DAY;
}
function getFundingChartIntervalSeconds(interval) {
  switch (interval) {
    case enum_1.FundingChartInterval.HOUR:
      return context_1.SECS_PER_HOUR;
    case enum_1.FundingChartInterval.EIGHT_HOUR:
      return 8 * context_1.SECS_PER_HOUR;
    default:
      throw new errors_1.TheGraphError(
        "Unsupported funding chart interval: " + interval
      );
  }
}
function roundFundingChartTimestamp(interval, ts) {
  switch (interval) {
    case enum_1.FundingChartInterval.HOUR:
      return hourIdFromTimestamp(ts);
    case enum_1.FundingChartInterval.EIGHT_HOUR: {
      const date = new Date(ts * 1000);
      const hours =
        getFundingChartIntervalSeconds(interval) / context_1.SECS_PER_HOUR;
      const startHours = Math.floor(date.getHours() / hours) * hours;
      date.setHours(startHours, 0, 0);
      return date.getTime() / 1000;
    }
    default:
      throw new errors_1.TheGraphError(
        "Unsupported funding chart interval: " + interval
      );
  }
}
function getKlineIntervalSeconds(interval) {
  switch (interval) {
    case enum_1.KlineInterval.HOUR:
      return context_1.SECS_PER_HOUR;
    case enum_1.KlineInterval.DAY:
      return context_1.SECS_PER_DAY;
    case enum_1.KlineInterval.WEEK:
      return context_1.SECS_PER_WEEK;
    case enum_1.KlineInterval.MINUTE:
      return context_1.SECS_PER_MINUTE;
    case enum_1.KlineInterval.FIVE_MINUTE:
      return 5 * context_1.SECS_PER_MINUTE;
    case enum_1.KlineInterval.FIFTEEN_MINUTE:
      return 15 * context_1.SECS_PER_MINUTE;
    case enum_1.KlineInterval.THIRTY_MINUTE:
      return 30 * context_1.SECS_PER_MINUTE;
    case enum_1.KlineInterval.FOUR_HOUR:
      return 4 * context_1.SECS_PER_HOUR;
    default:
      throw new errors_1.TheGraphError(
        "Unsupported kline interval: " + interval
      );
  }
}
function roundKlineTimestamp(interval, ts) {
  switch (interval) {
    case enum_1.KlineInterval.HOUR:
      return hourIdFromTimestamp(ts);
    case enum_1.KlineInterval.DAY:
      return dayIdFromTimestamp(ts);
    case enum_1.KlineInterval.WEEK:
      return weekIdFromTimestamp(ts);
    case enum_1.KlineInterval.MINUTE:
    case enum_1.KlineInterval.FIVE_MINUTE:
    case enum_1.KlineInterval.FIFTEEN_MINUTE:
    case enum_1.KlineInterval.THIRTY_MINUTE: {
      const date = new Date(ts * 1000);
      const mintues =
        getKlineIntervalSeconds(interval) / context_1.SECS_PER_MINUTE;
      const startMinutes = Math.floor(date.getMinutes() / mintues) * mintues;
      date.setMinutes(startMinutes, 0, 0);
      return date.getTime() / 1000;
    }
    default:
      throw new errors_1.TheGraphError(
        "Unsupported kline interval: " + interval
      );
  }
}
function getKlineIntervalStatement(interval) {
  switch (interval) {
    case enum_1.KlineInterval.HOUR:
      return "hourlyAmmDatas";
    case enum_1.KlineInterval.DAY:
      return "dailyAmmDatas";
    case enum_1.KlineInterval.WEEK:
      return "weeklyAmmDatas";
    case enum_1.KlineInterval.FOUR_HOUR:
      return "per4HourAmmDatas";
    default:
      throw new errors_1.TheGraphError(
        "Unsupported kline interval: " + interval
      );
  }
}
function fromWad(value) {
  return Number(ethers_1.ethers.utils.formatEther(value));
}
function reversePrice(price) {
  return price === 0 ? 0 : 1 / price;
}
function pickQuoteFromSymbol(symbol) {
  const from = symbol.indexOf("-");
  const to = symbol.lastIndexOf("-");
  if (from === -1 || to === -1 || from === to) {
    throw new Error(`invalid symbol: ${symbol}`);
  }
  return symbol.substring(from + 1, to);
}
function pickQuoteFromFullSymbol(fullSymbol) {
  const last = fullSymbol.lastIndexOf("-");
  if (last === -1) {
    throw new Error(`invalid full symbol: ${fullSymbol}`);
  }
  return pickQuoteFromSymbol(fullSymbol.substring(0, last));
}
