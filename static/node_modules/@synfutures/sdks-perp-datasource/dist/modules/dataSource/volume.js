"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Volume = void 0;
const context_1 = require("@derivation-tech/context");
const graph_1 = require("@derivation-tech/context/dist/utils/graph");
const utils_1 = require("../../utils");
class Volume {
  constructor(dataSource) {
    this.dataSource = dataSource;
  }
  async getVolumeData(instrumentAddr, expiry, startTs, endTs) {
    const fn = (str) => `"${str}"`;
    const ammCondition = `amm: ${fn(
      (0, utils_1.concatId)(instrumentAddr, expiry).toLowerCase()
    )},`;
    const startTsCondition = `timestamp_gte: ${startTs || 0},`;
    const endTsCondition = `timestamp_lt: ${endTs || (0, context_1.now)()},`;
    const graphQL = `
          query($skip: Int, $first: Int, $lastID: String){
            dailyAmmDatas(first: $first, where: {${ammCondition} ${startTsCondition}${endTsCondition} id_gt: $lastID}, orderBy: timestamp, orderDirection: asc){
              id
              timestamp
              volume
              baseVolume
            }
          }`;
    const result = [];
    const dailyAmmDatas = await this.dataSource.queryAll(
      graphQL,
      graph_1.GRAPH_PAGE_SIZE,
      true
    );
    for (const dailyData of dailyAmmDatas) {
      result.push({
        timestamp: Number(dailyData.timestamp),
        baseVolume: (0, utils_1.fromWad)(dailyData.baseVolume),
        quoteVolume: (0, utils_1.fromWad)(dailyData.volume),
      });
    }
    return result;
  }
}
exports.Volume = Volume;
