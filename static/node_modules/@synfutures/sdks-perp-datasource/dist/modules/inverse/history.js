"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InverseHistory = void 0;
const sdks_perp_1 = require("@synfutures/sdks-perp");
const dataSource_1 = require("../dataSource");
class InverseHistory extends dataSource_1.History {
  async getOrderHistory(param) {
    const results = await super.getOrderHistory(param);
    for (const o of results) {
      if (
        await this.dataSource.ctx.perp.configuration.isInverse(o.instrumentAddr)
      ) {
        o.side = sdks_perp_1.utils.reverseSide(o.side);
        o.price = sdks_perp_1.utils.reversePrice(o.price);
      }
    }
    return results;
  }
  async getVirtualTradeHistory(param) {
    const results = await super.getVirtualTradeHistory(param);
    for (const tx of results) {
      if (
        await this.dataSource.ctx.perp.configuration.isInverse(
          tx.instrumentAddr
        )
      ) {
        tx.side = sdks_perp_1.utils.reverseSide(tx.side);
        tx.price = sdks_perp_1.utils.reversePrice(tx.price);
      }
    }
    return results;
  }
  async getLiquidityHistory(param) {
    const results = await super.getLiquidityHistory(param);
    for (const l of results) {
      if (
        await this.dataSource.ctx.perp.configuration.isInverse(l.instrumentAddr)
      ) {
        const lowerPrice = l.lowerPrice;
        l.lowerPrice = sdks_perp_1.utils.reversePrice(l.upperPrice);
        l.upperPrice = sdks_perp_1.utils.reversePrice(lowerPrice);
        l.fairPrice = sdks_perp_1.utils.reversePrice(l.fairPrice);
      }
    }
    return results;
  }
}
exports.InverseHistory = InverseHistory;
