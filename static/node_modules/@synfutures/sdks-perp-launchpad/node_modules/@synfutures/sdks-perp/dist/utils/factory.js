"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createInstrument = createInstrument;
exports.createAmm = createAmm;
exports.createOrder = createOrder;
exports.createPosition = createPosition;
exports.createRange = createRange;
const constants_1 = require("../constants");
const math_1 = require("../math");
const utils_1 = require("./utils");
const lowLevel_1 = require("./lowLevel");
function createInstrument(instrument) {
  const minTradeValue = instrument.setting.quoteParam.minMarginAmount
    .mul(constants_1.RATIO_BASE)
    .div(instrument.setting.initialMarginRatio);
  const minOrderValue = minTradeValue.mul(constants_1.MIN_ORDER_MULTIPLIER);
  const minRangeValue = minTradeValue.mul(constants_1.MIN_RANGE_MULTIPLIER);
  return {
    ...instrument,
    instrumentAddr: instrument.instrumentAddr.toLowerCase(),
    instrumentType: instrument.market.feeder.ftype,
    marketType: instrument.market.info.type,
    minTradeValue,
    minOrderValue,
    minRangeValue,
    displayBase: instrument.base,
    displayQuote: instrument.quote,
    minTickDelta: (0, lowLevel_1.calcMinTickDelta)(
      instrument.setting.initialMarginRatio
    ),
  };
}
function createAmm(amm) {
  return {
    ...amm,
    instrumentAddr: amm.instrumentAddr.toLowerCase(),
    fairPrice: (0, math_1.sqrtX96ToWad)(amm.sqrtPX96),
  };
}
function createOrder(order) {
  return {
    ...order,
    instrumentAddr: order.instrumentAddr.toLowerCase(),
    traderAddr: order.traderAddr.toLowerCase(),
    oid: (0, utils_1.orderKey)(order.tick, order.nonce),
    side: (0, utils_1.sizeToSide)(order.size),
    limitPrice: math_1.TickMath.getWadAtTick(order.tick),
  };
}
function createPosition(position) {
  return {
    ...position,
    instrumentAddr: position.instrumentAddr.toLowerCase(),
    traderAddr: position.traderAddr.toLowerCase(),
    side: (0, utils_1.sizeToSide)(position.size),
    entryPrice: position.size.eq(math_1.ZERO)
      ? math_1.ZERO
      : (0, math_1.wdiv)(position.entryNotional, position.size.abs()),
  };
}
function createRange(range) {
  return {
    ...range,
    instrumentAddr: range.instrumentAddr.toLowerCase(),
    traderAddr: range.traderAddr.toLowerCase(),
    rid: (0, utils_1.rangeKey)(range.tickLower, range.tickUpper),
    lowerPrice: math_1.TickMath.getWadAtTick(range.tickLower),
    upperPrice: math_1.TickMath.getWadAtTick(range.tickUpper),
    entryPrice: (0, math_1.sqrtX96ToWad)(range.sqrtEntryPX96),
  };
}
