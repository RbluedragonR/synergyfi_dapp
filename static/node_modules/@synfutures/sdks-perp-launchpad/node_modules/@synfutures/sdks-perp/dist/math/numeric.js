"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NumericConverter = void 0;
exports.asUint16 = asUint16;
exports.asInt24 = asInt24;
exports.asUint24 = asUint24;
exports.asUint48 = asUint48;
exports.asUint96 = asUint96;
exports.asUint128 = asUint128;
exports.asUint256 = asUint256;
exports.forceAsInt24 = forceAsInt24;
exports.asInt256 = asInt256;
exports.asInt128 = asInt128;
exports.decompose = decompose;
const ethers_1 = require("ethers");
const constants_1 = require("./constants");
function asUint16(x) {
  if (x < 0) {
    x += 1 << 16;
  }
  return x;
}
function asInt24(x) {
  const MAX_INT_24 = (1 << 23) - 1;
  if (x > MAX_INT_24) {
    x -= 1 << 24;
  }
  return x;
}
function asUint24(x) {
  if (x < 0) {
    x += 1 << 24;
  }
  return x;
}
function asUint48(x) {
  if (x < 0) {
    x += 1 << 48;
  }
  return x;
}
function asUint96(x) {
  if (x.isNegative()) {
    x = x.add(constants_1.ONE.shl(96));
  }
  return x;
}
function asUint128(x) {
  if (x.isNegative()) {
    x = x.add(constants_1.ONE.shl(128));
  }
  return x;
}
function asUint256(x) {
  if (x.isNegative()) {
    x = x.add(constants_1.ONE.shl(256));
  }
  return x;
}
function forceAsInt24(x) {
  x = x.and(constants_1.ONE.shl(24).sub(constants_1.ONE));
  if (x.gt(constants_1.MAX_INT_24)) {
    x = x.sub(constants_1.ONE.shl(24));
  }
  return x;
}
function asInt256(x) {
  if (x.gt(ethers_1.ethers.constants.MaxInt256)) {
    x = x.sub(constants_1.ONE.shl(256));
  }
  return x;
}
function asInt128(x) {
  const MAX_INT_128 = constants_1.ONE.shl(127).sub(constants_1.ONE);
  if (x.gt(MAX_INT_128)) {
    x = x.sub(constants_1.ONE.shl(128));
  }
  return x;
}
function decompose(tick) {
  const wordPos = tick >> 8;
  let bitPos = tick % 256;
  if (bitPos < 0) bitPos += 256;
  return { wordPos, bitPos };
}
class NumericConverter {
  static scaleQuoteAmount(amount, quoteDecimals) {
    const quoteAmountScaler = ethers_1.BigNumber.from(10).pow(
      18 - quoteDecimals
    );
    return amount.mul(quoteAmountScaler);
  }
  static toContractQuoteAmount(amount, quoteDecimals) {
    const quoteAmountScaler = ethers_1.BigNumber.from(10).pow(
      18 - quoteDecimals
    );
    return amount.div(quoteAmountScaler);
  }
  static toContractRatio(ratioWad) {
    return ratioWad.div(ethers_1.BigNumber.from(10).pow(14)).toNumber();
  }
}
exports.NumericConverter = NumericConverter;
